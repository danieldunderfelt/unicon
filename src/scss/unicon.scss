/****************************************************
*   Default values. Change as desired.
*****************************************************/

$unicon-padding: .4em !default;
$unicon-display: inline !default;
$unicon-font: 'Georgia', serif !default;
$unicon-enable-classes: true;

/****************************************************
*   Icon names and unicode identifiers.
*****************************************************/

@import 'icons';

/****************************************************
*   Mixin and classes definitions
*****************************************************/

@function unicon-insert($name) {
	@if map-has-key($unicon-icons, $name) {
		@return map-get($unicon-icons, $name);
	}
	@else {
		@debug("Chosen icon not found.");
	}

	@return "";
}

%unicon-icon-class {

	&:before, &:after {
		display: $unicon-display;
		font-family: $unicon-font;
		padding-left: $unicon-padding;
	}

	&:before {
		padding-right: $unicon-padding;
	}
}

@mixin unicon($name, $position: after) {
	@if map-has-key($unicon-icons, $name) {
		$icon-char: map-get($unicon-icons, $name);

		@extend %unicon-icon-class;

		&:#{$position} {
			content: $icon-char;
			@content;
		}
	}
	@else {
		@debug("Chosen icon not found.");
	}
}

@if $unicon-enable-classes {
	@each $icon in $unicon-icons {

		.unicon-#{nth($icon, 1)},
		[data-unicon-after="#{nth($icon, 1)}"] {

			&:after {
				content: unicon-insert(nth($icon, 1));
			}
		}

		.unicon-#{nth($icon, 1)}-before, [data-unicon-before="#{nth($icon, 1)}"] {

			&:before {
				content: unicon-insert(nth($icon, 1));
			}
		}
	}

	[class^='unicon'], [class*=' unicon'] {
		@extend %unicon-icon-class;
	}
}